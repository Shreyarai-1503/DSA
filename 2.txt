'''Implement all the functions of a dictionary (ADT) using hashing and handle collisions using chaining with / without replacement. Data: Set of (key, value) pairs, Keys are mapped to values, Keys must be comparable, Keys must be unique. Standard Operations: Insert(key, value), Find(key), Delete(key)'''

hashTable = [[] for _ in range(10)]

def display_hash(hashTable):
    for i in range(len(hashTable)):
        print(i, end = " ")
        
        for j in hashTable[i]:
            print("---> ", j, end = " ")
        print()
        
def hashing(key):
    add = 0
    for e in key:
        add += ord(e)
    
    return add%len(hashTable)

def Insert(key, value):
    pair = [key, value]
    Hash = hashing(key)
    for pair in hashTable[Hash]:
        if pair[0] == key:
            pair[1] = value
            return
    hashTable[Hash].append(pair)
    
def Find(key):
    Hash = hashing(key)
    for pair in hashTable[Hash]:
        if pair[0] == key:
            print(pair[1])
            return
    print("Key not found")  
    
def Delete(key):
    Hash = hashing(key)
    for pair in hashTable[Hash]:
        if pair[0] == key:
            hashTable[Hash].remove(pair)
            return
    print("Key not Present")

n = int(input("Enter num of words you want to add: "))
for _ in range(n):
    key = input("Enter Key: ")
    value = input("Enter Value: ")
    Insert(key, value)
    
display_hash(hashTable)

key = input("Enter Key to find: ")
Find(key)
key = input("Enter Key to delete: ")
Delete(key)
display_hash(hashTable)