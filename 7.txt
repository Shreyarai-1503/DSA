/* You have a business with several offices; you want to lease phone lines to connect them up with each other; and the phone company charges different amounts of money to connect different pairs of cities. You want a set of lines that connects all your offices with a minimum total cost. Solve the problem by suggesting appropriate data structures.*/

#include<iostream>
using namespace std;

class Tree{
    int a[20][20], v, e, l, u, w, visited[20];
    public:
        void input(){
            cout<<"Enter no. of branches: ";    //vertex
            cin>>v;
            
            for(int i=0; i<v; i++){
                visited[i] = 0;
                for(int j=0; j<v; j++){
                    a[i][j] = 999;
                }
            }
            
            cout<<"\nEnter the no. of connections: ";     //edges
            cin>>e;
            
            for(int i=0; i<e; i++){
                cout<<"Enter the end branches of connection: "<<endl;
                cin>>l>>u;
                cout<<"Enter the phone company charges for this connection: ";
                cin>>w;
                
                a[l-1][u-1] = a[u-1][l-1] = w;
            }
        }
        
        void display(){
            cout<<"\nAdjacency Matrix"<<endl;
            
            for(int i=0; i<v; i++){
                for(int j=0; j<v; j++){
                    cout<<a[i][j]<<"    ";
                }
                cout<<endl;
            }
        }
        void minimum(){
            int p=0;
            int q=0;
            int total=0;
            int min;
            visited[1] = 1;
            for(int count=0; count<(v-1); count++){
                min=999;
                for(int i=0; i<v; i++){
                    if(visited[i] == 1){
                        for(int j=0; j<v; j++){
                            if(visited[j] != 1){
                                if(min > a[i][j]){
                                    min = a[i][j];
                                    p=i;
                                    q=j;
                                }
                            }
                        }
                    }
                }
                visited[p] = 1;
                visited[q] = 1;
                total = total+min;
                cout<<"Minimum cost connection is "<<(p+1)<<" -> "<<(q+1)<<"  with charge : "<<min<< endl;
            }
            
            cout<<"The minimum total cost of connections of all branches is: "<<total<<endl;
        }
};

int main(){
	int ch;
	Tree t;
	do{
		cout<<"\n\n==========PRIM'S ALGORITHM================="<<endl;
		cout<<"1.INPUT\n \n2.DISPLAY\n \n3.MINIMUM\n"<<endl;
		cout<<"Enter your choice :"<<endl;
		cin>>ch;
    	switch(ch){	
        	case 1: cout<<"*******INPUT YOUR VALUES*******"<<endl;	
        		t.input();
        		break;
        
        	case 2: cout<<"*******DISPLAY THE CONTENTS********"<<endl;
        		t.display();
        		break;
        
        	case 3: cout<<"*********MINIMUM************"<<endl;
        		t.minimum();
        		break;
	    }
	}while(ch<4);
	return 0;
}