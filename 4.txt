/*Beginning with an empty binary search tree, Construct binary search tree by inserting the values in the order given. After constructing a binary tree -i. Insert new node, ii. Find number of nodes in longest path from root, iii. Minimum data value found in the tree, iv. Change a tree so that the roles of the left and right pointers are swapped at every node, v. Search a value*/

#include<iostream>
using namespace std;
struct node{
    int data;
    node *L;
    node *R;
};
node *root,*temp;
int count;

class bst{
    public:
    void create();
    void insert(node*,node*);
    void disin(node*);
    void dispre(node*);
    void dispost(node*);
    void search(node*);
    int height(node*);
    void mirror(node*);
    void min(node*);
    bst(){
      root=NULL;
      count=0;
    }
};

void bst::create(){
    int n;
    cout<<"Enter num of elements you want to add: ";
    cin>>n;
    for(int i=0; i<n; i++){
        temp=new node;
        cout<<"Enter the data : "; 
        cin>>temp->data;
        temp->L=NULL;
        temp->R=NULL;
        if(root==NULL)
            root=temp;
        else
            insert(root,temp);
        count++;
    }
    cout<<"\nThe Total no. of nodes are: "<<count;
} 
void bst::insert(node *root,node* temp) { 
    if(temp->data > root->data) {
        if(root->R==NULL)
            root->R=temp;
        else
            insert(root->R,temp);
    }
    else {
        if(root->L==NULL)
            root->L=temp;
        else
            insert(root->L,temp);
    }
}

void bst::disin(node *root) {
    if(root!=NULL){
        disin(root->L);
        cout<<root->data<<"\t"; 
        disin(root->R);
    }
}

void bst::dispre(node *root){
    if(root!=NULL){
        cout<<root->data<<"\t"; 
        dispre(root->L);
        dispre(root->R);
    }
}

void bst::dispost(node *root){
    if(root!=NULL){
        dispost(root->L);
        dispost(root->R);
        cout<<root->data<<"\t";
    }
}

void bst::search(node * root){
    int flag=0;
    int key;
    cout<<"\nEnter your key : "; 
    cin>>key;
    temp=root;
    while(temp!=NULL) {
        if(key==temp->data){
            cout<<"           KEY FOUND\n";
            flag = 1;
            return;  
        } 
        else if(key > temp->data)
            temp=temp->R;
        else
            temp=temp->L;
    }
    if(flag == 0) cout<<"          KEY NOT FOUND\n";
} 
int bst::height(node *root) { 
    int hl,hr; 
    if(root==NULL) 
        return 0; 
    else if(root->L==NULL && root->R==NULL)
        return 1;
    
    hr = 1+height(root->R);
    hl = 1+height(root->L);
    if(hr>hl)       return(hr);
    else        return(hl);
}

void bst::min(node *root){
    temp=root;
    cout<<endl; 
    while(temp->L!=NULL){
        temp=temp->L;
    }
    cout<<temp->data;
}

void bst::mirror(node *root){
    temp=root;
    if(root!=NULL){
        mirror(root->L);
        mirror(root->R);
        temp=root->L;
        root->L=root->R;
        root->R=temp;
    }
}

int main(){
    bst t;
    int ch;
    char ans;
    do{
        cout<<"\n1) Insert new node \n2) number of nodes in longest path \n3) minimum \n4) mirror \n5) search \n6) inorder \n7) preorder \n8) postorder \n9)Quit"<<endl; 
        cin>>ch;
        switch(ch){
            case 1:
                t.create();
                break;
            case 2:
                cout<<"\nNumber of nodes in longest path:"<<t.height(root);
                break;
            case 3:
                cout<<"\nThe min element is:";
                t.min(root);
                break;
            case 4:
                t.mirror(root);
                cout<<"\nThe mirror of tree is: ";
                t.disin(root);
                break;
            case 5:
                t.search(root);
                break;
            case 6:
                cout<<"\n***************INORDER**************"<<endl;
                t.disin(root);
                break;
            case 7:
                cout<<"\n***************PREORDER**************"<<endl;
                t.dispre(root);
                break;
            case 8:
                cout<<"\n*******************POSTORDER**************"<<endl;
                t.dispost(root);
                break;
        }
    }while(ch < 9);
    return 0;
}