/*Given sequence k = k1 &lt;k2 &lt; â€¦ &lt;kn of n sorted keys, with a search probability pi for each key ki. Build the Binary search tree that has the least search cost given the access probability for each key*/
#include <iostream>
using namespace std;

class OBST {
    int a[10], r[10][10], n;
    float p[10], q[10], w[10][10], c[10][10];
    public:
        void accept();                  // Function to input data
        void construct_obst();          // Function to construct optimal BST
        int knuth_min(int i, int j);    // Helper function to find optimal root
        void print_tree(int i, int j);  // Function to print tree structure
};

void OBST::accept() {
    cout << "Enter num of elements: ";
    cin >> n;
    cout << "Enter "<<n<<" elements\n";
    for (int i = 1; i <= n; i++)
    cin >> a[i] ;
    cout << "Enter "<<n<<" probabilities\n";
    for (int i = 1; i <= n; i++)
    cin >>  p[i];
    cout << "Enter "<< n + 1 <<" failure probabilities\n";
    for (int i = 0; i <= n; i++)
    cin >> q[i];
}

void OBST::construct_obst(){
    for(int i=0; i<n; i++){  /* Initialize the weight and cost matrices */
        w[i][i] = q[i];
        r[i][i] = c[i][i] = 0;
        w[i][i + 1] = q[i] + p[i+1] + q[i+1];
        r[i][i + 1] = i + 1;
        c[i][i + 1] = w[i][i+1];
    }
    w[n][n] = q[n];
    r[n][n] = c[n][n] = 0;
    
    for(int m = 2; m <= n; m++){   /* calculate the weight and cost matrices */
        for(int i = 0; i <= n-m; i++){
            int j = i + m;
            w[i][j] = w[i][j-1] + p[j] + q[j];
            int k = knuth_min(i, j); 
            c[i][j] = w[i][j] + c[i][k-1] + c[k][j];
            r[i][j] = k;
        }
    }
    
    cout<<"Root node is "<<a[r[0][n]]<<endl;
    cout<<"\nLeft child of "<<a[r[0][n]]<<" is ";
    print_tree(0, r[0][n]-1);
    cout<<"\nRight child of "<<a[r[0][n]]<<" is ";
    print_tree(r[0][n], n);
}

int OBST::knuth_min(int i, int j){   /* Implements Knuth's optimization to find the index (k) that minimizes the cost in the range [i, j]*/
    int min_idx;
    float min_cost = 999;           //c[i][i]+c[i+1][j];
    
    for(int k = i+1; k<=j; k++){
        float cost = c[i][k-1] + c[k][j];
        if(min_cost > cost){
            min_cost = cost;
            min_idx = k;
        }
    }
    
    return min_idx;
}

void OBST::print_tree(int i, int j){
    if(r[i][j] == 0){
        cout<<"NULL";
        return;
    }  
    cout<<a[r[i][j]];
    cout<<"\nLeft child of "<<a[r[i][j]]<<" is ";
    print_tree(i, r[i][j]-1);
    cout<<"\nRight child of "<<a[r[i][j]]<<" is ";
    print_tree(r[i][j], j);
}

int main() {
    OBST o;
    o.accept();
    o.construct_obst();
    return 0;
}